using System.Collections;
using System.Collections.Generic;
using UniRx;
using UnityEngine;

namespace MrX.EndlessSurvivor
{
    public class WaveSpawner : MonoBehaviour
    {
        [Header("Stage & Spawn Configuration")]
        [Tooltip("K√©o file ScriptableObject ch·ª©a k·ªãch b·∫£n c·ªßa c·∫£ m√†n ch∆°i v√†o ƒë√¢y.")]
        [SerializeField] private StageDataSO currentStageData;

        [Tooltip("Danh s√°ch c√°c ƒëi·ªÉm c√≥ th·ªÉ spawn k·∫ª ƒë·ªãch.")]
        [SerializeField] private Transform[] spawnPoints;
        [Tooltip("Th·ªùi gian ƒë·∫øm ng∆∞·ª£c ch·ªù gi·ªØa c√°c wave.")]
        [SerializeField] private float countdownBetweenWaves = 5f;
        // [SerializeField] private int m_CD_Nextwave = 5;
        // Th√™m bi·∫øn t·ªïng s·ªë wave
        [SerializeField] public int TotalWavesInStage = 20;
        // public int CurrentWave { get; private set; }
        // public int enemyCount;// D√πng UniRx ƒë·ªÉ t·ª± ƒë·ªông th√¥ng b√°o cho UI
        public ReactiveProperty<int> CurrentWaveNumber { get; private set; } = new ReactiveProperty<int>(0);
        public ReactiveProperty<int> EnemiesKilledThisWave { get; private set; } = new ReactiveProperty<int>(0);
        public ReactiveProperty<float> EnemyPoint { get; private set; } = new ReactiveProperty<float>(0f);
        public ReactiveProperty<int> TotalEnemiesInWave { get; private set; } = new ReactiveProperty<int>(0);
        public enum SpawnState
        {
            SPAWNING,      // Tr·∫°ng th√°i ƒëang t·∫°o ƒë·ªãch
            WAITING,       // Tr·∫°ng th√°i ƒëang ch·ªù ng∆∞·ªùi ch∆°i di·ªát h·∫øt ƒë·ªãch
            COUNTING_DOWN  // Tr·∫°ng th√°i ƒëang ƒë·∫øm ng∆∞·ª£c t·ªõi wave ti·∫øp theo
        }
        public SpawnState m_state;
        private void OnEnable()
        {

            // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± thay ƒë·ªïi tr·∫°ng th√°i t·ª´ GameManager
            EventBus.Subscribe<StateUpdatedEvent>(OnGameStateChanged);//L·∫Øng nghe tr·∫°ng th√°i game do gamemanager qu·∫£n l√Ω
            // EventBus.Subscribe<EnemySpawnedEvent>(OnEnemySpawned);//L·∫Øng nghe tr·∫°ng th√°i game do gamemanager qu·∫£n l√Ω
            EventBus.Subscribe<EnemyDiedEvent>(OnEnemyDied); // << TH√äM D√íNG N√ÄY
        }

        private void OnDisable()
        {
            EventBus.Unsubscribe<StateUpdatedEvent>(OnGameStateChanged);
            // EventBus.Unsubscribe<EnemySpawnedEvent>(OnEnemySpawned);
            EventBus.Unsubscribe<EnemyDiedEvent>(OnEnemyDied); // << TH√äM D√íNG N√ÄY
        }

        private void OnEnemyDied(EnemyDiedEvent value)
        {
            if (m_state == SpawnState.WAITING || m_state == SpawnState.SPAWNING)
            {
                // Debug.Log($"EnemiesKilledThisWave: {EnemiesKilledThisWave.Value}");
                EnemiesKilledThisWave.Value++; // TƒÉng bi·∫øn ƒë·∫øm khi c√≥ enemy ch·∫øt
                EnemyPoint.Value = EnemiesKilledThisWave.Value * 0.2f;
                // Debug.Log($"EnemyPoint: {EnemyPoint.Value}");
            }
        }
        #region Unity Lifecycle & Event Subscription
        void Start()
        {
            if (currentStageData == null)
            {
                Debug.LogError("CH∆ØA G√ÅN StageDataSO CHO WAVESPAWNER!", this);
                this.enabled = false; // V√¥ hi·ªáu h√≥a script n√†y n·∫øu thi·∫øu file config
                return;
            }
            m_state = SpawnState.COUNTING_DOWN;
            SetupUniRxSubscriptions();
            StartNextWave();
        }
        void Update()
        {
            if (m_state == SpawnState.WAITING)
            {
                if (EnemyManager.Ins.activeEnemies.Count == 0)
                {
                    // N·∫øu kh√¥ng c√≤n k·∫ª th√π n√†o, wave ƒë√£ ho√†n th√†nh!
                    if (CurrentWaveNumber.Value > 0 && CurrentWaveNumber.Value % 3 == 0)
                    {
                        // UpgradePhase();
                        // Debug.Log("UpgradePhase");
                        WaveCompleted();//N·∫øu kh√¥ng c√≥ UpgradePhase th√¨ l·∫≠p t·ª©c v√†o d√≤ng n√†y
                    }
                    else
                    {
                        WaveCompleted();
                    }
                }
            }

        }
        #endregion
        #region Core Spawning Logic

        public void StartNextWave()
        {
            // L·∫•y index c·ªßa wave hi·ªán t·∫°i (CurrentWaveNumber b·∫Øt ƒë·∫ßu t·ª´ 1, index list b·∫Øt ƒë·∫ßu t·ª´ 0)
            int waveIndex = CurrentWaveNumber.Value;

            if (waveIndex >= TotalWavesInStage)
            {
                Debug.Log("üéâ ƒê√É HO√ÄN TH√ÄNH T·∫§T C·∫¢ C√ÅC WAVE! X·ª≠ l√Ω logic chi·∫øn th·∫Øng t·∫°i ƒë√¢y.");
                // TODO: Th√™m logic chi·∫øn th·∫Øng
                return;
            }

            // Chuy·ªÉn sang wave ti·∫øp theo
            CurrentWaveNumber.Value++;

            // L·∫•y d·ªØ li·ªáu c·ªßa wave t·ª´ ScriptableObject
            WaveData waveToSpawn = currentStageData.waves[waveIndex];

            // Reset c√°c bi·∫øn ƒë·∫øm cho wave m·ªõi
            EnemiesKilledThisWave.Value = 0;
            TotalEnemiesInWave.Value = waveToSpawn.GetTotalEnemiesInWave();

            // B·∫Øt ƒë·∫ßu coroutine ƒë·ªÉ spawn qu√°i
            StartCoroutine(SpawnWaveCoroutine(waveToSpawn));
        }

        private IEnumerator SpawnWaveCoroutine(WaveData waveData)
        {
            m_state = SpawnState.SPAWNING;
            Debug.Log($"B·∫Øt ƒë·∫ßu Wave {CurrentWaveNumber.Value}: '{waveData.waveName}' v·ªõi {TotalEnemiesInWave.Value} k·∫ª ƒë·ªãch.");

            // V√≤ng l·∫∑p ch√≠nh: duy·ªát qua t·ª´ng nh√≥m qu√°i ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong wave
            foreach (var group in waveData.enemyGroups)
            {
                // Ch·ªù tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu nh√≥m m·ªõi (n·∫øu c√≥)
                if (group.delayBeforeSpawningGroup > 0)
                {
                    yield return new WaitForSeconds(group.delayBeforeSpawningGroup);
                }

                // V√≤ng l·∫∑p ph·ª•: spawn t·ª´ng con qu√°i trong nh√≥m
                for (int i = 0; i < group.count; i++)
                {
                    SpawnAndRegister(group.enemyName);

                    // Ch·ªù gi·ªØa m·ªói l·∫ßn spawn (n·∫øu c√≥)
                    if (group.spawnInterval > 0)
                    {
                        yield return new WaitForSeconds(group.spawnInterval);
                    }
                }
            }

            // Sau khi spawn h·∫øt t·∫•t c·∫£ c√°c nh√≥m, chuy·ªÉn sang tr·∫°ng th√°i ch·ªù
            m_state = SpawnState.WAITING;
            Debug.Log("ƒê√£ spawn xong. Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù ng∆∞·ªùi ch∆°i d·ªçn d·∫πp...");
        }

        private void SpawnAndRegister(string enemyName)
        {
            if (spawnPoints.Length == 0) return;

            int randomIndex = Random.Range(0, spawnPoints.Length);
            Transform randomSpawnPoint = spawnPoints[randomIndex];

            GameObject enemyObj = PoolManager.Ins.GetFromPool(enemyName, randomSpawnPoint.position);
            if (enemyObj == null)
            {
                Debug.LogWarning($"Kh√¥ng t√¨m th·∫•y enemy c√≥ t√™n '{enemyName}' trong Pool!");
                return;
            }

            Enemy enemyScript = enemyObj.GetComponent<Enemy>();
            if (enemyScript != null)
            {
                EnemyManager.Ins.RegisterEnemy(enemyScript);
            }
        }

        #endregion

        #region State & Event Handling

        void WaveCompleted()
        {
            Debug.Log($"‚úÖ Wave {CurrentWaveNumber.Value} ƒë√£ ho√†n th√†nh!");
            m_state = SpawnState.COUNTING_DOWN;

            // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c cho wave ti·∫øp theo
            StartCoroutine(CountdownCoroutine(countdownBetweenWaves));
        }

        private IEnumerator CountdownCoroutine(float duration)
        {
            Debug.Log($"ƒê·∫øm ng∆∞·ª£c {duration} gi√¢y cho wave ti·∫øp theo...");
            float timer = duration;
            while (timer > 0)
            {
                // C√≥ th·ªÉ ph√°t ƒëi event countdown ƒë·ªÉ UI hi·ªÉn th·ªã n·∫øu c·∫ßn
                MessageBroker.Default.Publish(new WaveCountdownTickMessage { RemainingTime = timer });
                timer -= Time.deltaTime;
                yield return null;
            }

            StartNextWave();
        }



        private void OnGameStateChanged(StateUpdatedEvent evt)
        {
            if (evt.CurState == GameState.GAMEOVER)
            {
                StopAllCoroutines();
                this.enabled = false; // Ng·ª´ng ho·∫°t ƒë·ªông c·ªßa spawner khi game over
                Debug.Log("WaveSpawner ƒë√£ ng·ª´ng ho·∫°t ƒë·ªông do GAMEOVER.");
            }
        }

        private void SetupUniRxSubscriptions()
        {
            // UniRx ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh c·ªßa wave hi·ªán t·∫°i cho UI
            Observable.CombineLatest(
                EnemiesKilledThisWave,
                TotalEnemiesInWave,
                (killed, total) =>
                {
                    if (total <= 0) return 0f;
                    return (float)killed / total;
                })
                .Subscribe(currentProgress =>
                {
                    // Ph√°t ƒëi s·ª± ki·ªán ch·ª©a ti·∫øn tr√¨nh c·ªßa wave hi·ªán t·∫°i
                    EventBus.Publish(new WaveProgressUpdatedEvent
                    {
                        progressPercentage = currentProgress,
                        currentWaveNumber = CurrentWaveNumber.Value
                    });
                })
                .AddTo(this);
        }

        #endregion
    }
}
